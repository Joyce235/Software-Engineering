package edu.vt.cs5044;

import static edu.vt.cs5044.DABGuiName.*;

import java.awt.event.ActionEvent;
import java.util.Map;

import javax.swing.*;

@SuppressWarnings("serial")
public class DABPanel extends JPanel {

    private final DotsAndBoxes game;
    private final JLabel p1ScoreLabel;
    private final JLabel p2ScoreLabel;
    private final JLabel turnLabel;
    private final JComboBox<Integer> xCombo;
    private final JComboBox<Integer> yCombo;
    private final JComboBox<Direction> dirCombo;
    private final JButton drawButton;
    private final DABGrid dabGrid;

    public DABPanel(JFrame frame) {
        frame.setJMenuBar(setupMenuBar());

        game = new DotsAndBoxes();

        xCombo = new JComboBox<>();
        xCombo.setName(X_COMBO);

        yCombo = new JComboBox<>();
        yCombo.setName(Y_COMBO);

        dirCombo = new JComboBox<>(Direction.values());
        dirCombo.setName(DIR_COMBO);

        drawButton = new JButton("Draw");
        drawButton.setName(DRAW_BUTTON);
        drawButton.addActionListener(this::handleDrawButton);

        turnLabel = new JLabel();
        turnLabel.setName(TURN_LABEL);

        p1ScoreLabel = new JLabel();
        p1ScoreLabel.setName(P1_SCORE_LABEL);

        p2ScoreLabel = new JLabel();
        p2ScoreLabel.setName(P2_SCORE_LABEL);

        dabGrid = new DABGrid(game);
        dabGrid.setName(DAB_GRID);

        setupLayout();
        startGame(3);
    }

    private void handleDrawButton(ActionEvent ae) {
        int x = xCombo.getItemAt(xCombo.getSelectedIndex());
        int y = yCombo.getItemAt(yCombo.getSelectedIndex());
        Direction dir = dirCombo.getItemAt(dirCombo.getSelectedIndex());
        boolean success = game.drawEdge(new Coordinate(x, y), dir);
        updateStatus(success);
    }

    private void updateStatus(boolean updateRequired) {
        if (updateRequired) {
            turnLabel.setText(game.getCurrentPlayer().toString());
            Map<Player, Integer> scores = game.getScores();
            p1ScoreLabel.setText("ONE: " + scores.get(Player.ONE));
            p2ScoreLabel.setText("TWO: " + scores.get(Player.TWO));
            drawButton.setEnabled(game.getCurrentPlayer() != null);
            if (game.getCurrentPlayer() == null) {
                turnLabel.setText("OVER");
            }
            repaint();
        }
    }

    private void updateCombos() {
        int size = game.getSize();
        xCombo.removeAllItems();
        yCombo.removeAllItems();
        for (int i = 0; i < size; i++) {
            xCombo.addItem(i);
            yCombo.addItem(i);
        }
    }

    private void startGame(int size) {
        game.init(size);
        updateCombos();
        updateStatus(true);
        drawButton.setEnabled(true);
    }

    private void setupLayout() {
        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);

        layout.setHorizontalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(xCombo)
                        .addComponent(yCombo)
                        .addComponent(dirCombo)
                        .addComponent(drawButton)
                        .addComponent(dabGrid))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(turnLabel)
                        .addComponent(p1ScoreLabel)
                        .addComponent(p2ScoreLabel))
        );

        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(xCombo)
                        .addComponent(yCombo)
                        .addComponent(dirCombo)
                        .addComponent(drawButton)
                        .addComponent(dabGrid))
                .addGroup(layout.createSequentialGroup()
                        .addComponent(turnLabel)
                        .addComponent(p1ScoreLabel)
                        .addComponent(p2ScoreLabel))
        );
    }

    private JMenuBar setupMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("Game");
        JMenuItem newGameItem = new JMenu("New");
        JCheckBoxMenuItem interactiveCheck = new JCheckBoxMenuItem("Interactive");
        JMenuItem size2Item = new JMenuItem("Size 2x2");
        JMenuItem size3Item = new JMenuItem("Size 3x3");
        JMenuItem size4Item = new JMenuItem("Size 4x4");

        newGameItem.add(size2Item);
        newGameItem.add(size3Item);
        newGameItem.add(size4Item);

        fileMenu.add(newGameItem);
        fileMenu.add(interactiveCheck);
        menuBar.add(fileMenu);

        size2Item.addActionListener(ae -> startGame(2));
        size3Item.addActionListener(ae -> startGame(3));
        size4Item.addActionListener(ae -> startGame(4));

        interactiveCheck.addActionListener(ae -> {
            if (interactiveCheck.isSelected()) {
                drawButton.setEnabled(false);
                dabGrid.setListener(this::updateStatus);
            } else {
                drawButton.setEnabled(true);
                dabGrid.removeListener();
            }
        });

        return menuBar;
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Dots And Boxes");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JComponent newContentPane = new DABPanel(frame);
        newContentPane.setOpaque(true);
        frame.setContentPane(newContentPane);
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(DABPanel::createAndShowGUI);
    }
}
